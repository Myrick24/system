rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isCoop() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'cooperative';
    }
    
    function isAdminOrCoop() {
      return isAdmin() || isCoop();
    }
    
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null;
      allow delete: if request.auth != null && isAdmin();
      allow create: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        (
          (request.resource.data.keys().hasAll(['name', 'email']) &&
           !('role' in request.resource.data.keys()) || request.resource.data.role == null ||
           request.resource.data.role == 'buyer') ||
          (request.resource.data.role == 'seller' &&
           request.resource.data.status == 'pending')
        );
    }
    
    match /users/{userId} {
      allow update: if request.auth != null && 
        isAdmin() &&
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['role', 'status']));
    }
    
    match /users/{userId} {
      allow read: if isCoop() && 
                    resource.data.cooperativeId == request.auth.uid;
      allow update: if isCoop() && 
                      resource.data.cooperativeId == request.auth.uid &&
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['status', 'updatedAt']);
    }
    
    match /sellers/{sellerId} {
      allow create: if request.auth != null && 
                    request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
                 (resource.data.userId == request.auth.uid || isAdmin());
      allow read: if request.auth != null;
      allow read: if isCoop() && 
                    resource.data.cooperativeId == request.auth.uid;
      allow update: if isCoop() && 
                      resource.data.cooperativeId == request.auth.uid &&
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['status', 'verified', 'updatedAt']);
      allow update: if request.auth != null && isAdmin();
    }
      
    match /products/{productId} {
      allow read: if resource.data.status == 'approved';
      allow list: if request.auth != null;
      allow create: if request.auth != null && 
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'seller' &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status == 'approved';
      allow read, update, delete: if request.auth != null && 
                                 resource.data.sellerId == request.auth.uid;
      allow read: if isCoop() && 
                    resource.data.cooperativeId == request.auth.uid;
      allow update: if isCoop() && 
                      resource.data.cooperativeId == request.auth.uid &&
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['status', 'updatedAt', 'approvedBy', 'approvedAt']);
      allow update: if request.auth != null && 
                   request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentStock', 'quantity']);
      allow read, update, delete: if request.auth != null && isAdmin();
    }
    
    match /admin_notifications/{notificationId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && isAdmin();
    }
    
    match /cooperative_notifications/{notificationId} {
      allow create: if request.auth != null;
      allow read: if isCoop() && 
                    resource.data.cooperativeId == request.auth.uid;
      allow update: if isCoop() && 
                      resource.data.cooperativeId == request.auth.uid &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
    }
    
    match /user_notifications/{notificationId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && 
                    resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && 
                      resource.data.userId == request.auth.uid &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
    }
    
    match /users/{userId}/notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && isAdmin();
      allow update: if request.auth != null && 
                   request.auth.uid == userId && 
                   request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
    }
    
    match /transactions/{transactionId} {
      allow read, create: if request.auth != null && 
        (request.resource.data.buyerId == request.auth.uid || 
         request.resource.data.sellerId == request.auth.uid);
      allow update: if request.auth != null && 
        (resource.data.buyerId == request.auth.uid || 
         resource.data.sellerId == request.auth.uid) &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'updatedAt']);
      allow read, update: if request.auth != null && isAdmin();
    }
    
    match /notifications/{notificationId} {
      // Users can read individual notifications that belong to them
      allow get: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      
      // Users can list/query their own notifications
      // This is needed for collection queries with where() clauses
      allow list: if request.auth != null;
        
      // System can create notifications for users (for checkout, products, etc.)
      allow create: if request.auth != null;
         
      // Users can update their own notifications (mark as read)
      allow update: if request.auth != null && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'isRead', 'readAt']);
      
      // Users can delete their own notifications
      allow delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
         
      // Admins can read and manage all notifications
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Seller notifications collection (for orders/reservations)
    match /seller_notifications/{notificationId} {
      // Sellers can read their own notifications
      allow read: if request.auth != null && 
        resource.data.sellerId == request.auth.uid;
        
      // System can create seller notifications
      allow create: if request.auth != null;
      
      // Sellers can update their notifications (mark as read/handled)
      allow update: if request.auth != null && 
        resource.data.sellerId == request.auth.uid;
        
      // Admins can manage all seller notifications
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Product updates collection (for tracking product changes)
    match /product_updates/{updateId} {
      // Any authenticated user can read product updates
      allow read: if request.auth != null;
      
      // System can create product updates
      allow create: if request.auth != null;
      
      // Admins can manage all product updates
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Buyer product alerts collection
    match /buyer_product_alerts/{alertId} {
      // Any authenticated buyer can read product alerts
      allow read: if request.auth != null;
      
      // System can create alerts
      allow create: if request.auth != null;
      
      // Admins can manage all alerts
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Seller market updates collection
    match /seller_market_updates/{updateId} {
      // Sellers can read market updates
      allow read: if request.auth != null && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'seller' ||
         isAdmin());
      
      // System can create market updates
      allow create: if request.auth != null;
      
      // Admins can manage all updates
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Orders items subcollection
    match /orders/{orderId}/items/{itemId} {
      allow read, write: if request.auth != null && 
        (get(/databases/$(database)/documents/orders/$(orderId)).data.userId == request.auth.uid ||
         get(/databases/$(database)/documents/orders/$(orderId)).data.sellerId == request.auth.uid ||
         isAdmin());
    }
    
    // Reservations collection
    match /reservations/{reservationId} {
      // Users can read reservations they created or are selling
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.sellerId == request.auth.uid);
         
      // Users can create reservations
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
         
      // Users can update their own reservations
      allow update: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.sellerId == request.auth.uid);
      
      // Allow listing for users
      allow list: if request.auth != null;
         
      // Admins can manage all reservations
      allow read, write: if request.auth != null && isAdmin();
      
      // Reservation items subcollection
      match /items/{itemId} {
        allow read, write: if request.auth != null && 
          (get(/databases/$(database)/documents/reservations/$(reservationId)).data.userId == request.auth.uid ||
           get(/databases/$(database)/documents/reservations/$(reservationId)).data.sellerId == request.auth.uid ||
           isAdmin());
      }
    }
    
    // Chats collection
    match /chats/{chatId} {
      allow read, write: if request.auth != null && 
        (resource.data.sellerId == request.auth.uid || 
         resource.data.customerId == request.auth.uid);
      allow create: if request.auth != null && 
        (request.resource.data.sellerId == request.auth.uid || 
         request.resource.data.customerId == request.auth.uid);
      allow list: if request.auth != null;
      allow read, write: if request.auth != null && isAdmin();
      
      match /messages/{messageId} {
        allow read, create: if request.auth != null && 
          (get(/databases/$(database)/documents/chats/$(chatId)).data.sellerId == request.auth.uid || 
           get(/databases/$(database)/documents/chats/$(chatId)).data.customerId == request.auth.uid);
        allow update: if request.auth != null && 
          resource.data.senderId == request.auth.uid;
        allow read, write: if request.auth != null && isAdmin();
      }
    }

    match /seller_ratings/{ratingId} {
      allow read: if true;
      allow create: if request.auth != null && 
        request.resource.data.buyerId == request.auth.uid;
      allow update, delete: if request.auth != null && 
        resource.data.buyerId == request.auth.uid;
      allow read, write: if request.auth != null && isAdmin();
    }

    match /review_reports/{reportId} {
      allow create: if request.auth != null && 
        request.resource.data.reportedBy == request.auth.uid;
      allow read, write: if request.auth != null && isAdmin();
    }
    
    match /user_carts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      match /cart_items/{cartItemId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    match /orders/{orderId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && 
        (resource.data.buyerId == request.auth.uid || 
         resource.data.userId == request.auth.uid ||
         resource.data.sellerId == request.auth.uid ||
         isCoop() ||
         isAdmin());
      allow list: if request.auth != null && (isCoop() || isAdmin()) || 
                  request.auth != null;
      allow update: if request.auth != null && 
        ((resource.data.buyerId == request.auth.uid || 
         resource.data.userId == request.auth.uid ||
         resource.data.sellerId == request.auth.uid) &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'updatedAt', 'deliveryDate', 'notes'])) ||
        (isCoop() && 
         request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'updatedAt', 'deliveryDate', 'notes', 'paymentCollected', 'paymentCollectedAt']));
      allow read, update: if request.auth != null && isAdmin();
      
      match /items/{itemId} {
        allow read, write: if request.auth != null;
      }
    }
    
    match /gcash_payments/{paymentId} {
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['referenceNumber', 'status', 'updatedAt']);
      allow read, update: if request.auth != null && isAdmin();
      allow list: if request.auth != null;
    }
    
    match /paymongo_payments/{paymentId} {
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow read, update: if request.auth != null && isAdmin();
      allow list: if request.auth != null;
    }
    
    match /product_orders/{productId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow read, write: if request.auth != null && isAdmin();
      
      match /orders/{orderId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow write: if request.auth != null && isAdmin();
      }
      
      match /order_refs/{orderRefId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow write: if request.auth != null && isAdmin();
      }
    }
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
